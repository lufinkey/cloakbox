#!/bin/bash

prog_name=cloakbox

readonly EXITCODE_UNKNOWN_ERROR=1
readonly EXITCODE_BAD_ARGS=28

readonly EXITCODE_FILE_NOT_FOUND=101
readonly EXITCODE_UNKNOWN_MIME_TYPE=102
readonly EXITCODE_UNSUPPORTED_MIME_TYPE=103
readonly EXITCODE_DOWNLOAD_NOT_FOUND=104

readonly DOWNLOADS_ROOT="/shared/downloads"
readonly RPC_URL="http://localhost:6800/jsonrpc"

function json-escape
{
	json_str="$1"
	echo "${json_str//'"'/'\"'}"
}

function rpc-post-data # params
{
	escaped_method=$(json-escape "$1")
	echo "{\"jsonrpc\":\"2.0\", \"id\":\"$prog_name\", \"method\":\"$escaped_method\", \"params\":[$2]}"
}

function output-result # result, prefix
{
	result=$(echo "$1" | jq "del(.dir)") # Remove download dir attribute
	prefix="$2"
	keys=$(echo "$result" | jq "keys")
	keys_length=$(echo "$keys" | jq "length")
	key_counter=0
	while [ "$key_counter" -lt "$keys_length" ]
	do
		key=$(echo "$keys" | jq -r ".[$key_counter]")
		escaped_key=$(json-escape "$key")
		value_obj=$(echo "$result" | jq ".\"$escaped_key\"")
		value_type=$(echo "$value_obj" | jq -r "type")
		if [ "$value_type" == "string" ]
		then
			value=$(echo "$value_obj" | jq -r ".")
			if [ -n "$value" ]
			then
				echo "$prefix$key: $value"
			fi
		elif [ "$value_type" == "object" ]
		then
			sub_values=$(output-result "$value_obj" "$prefix$key.")
			echo "$sub_values"
		fi
		key_counter=$(($key_counter+1))
	done
}

function list-downloads # method, params
{
	# Request downloads
	post_data=$(rpc-post-data "$1" "$2")
	resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")

	# Output downloads
	results=$(echo "$resp" | jq ".result")
	results_count=$(echo "$results" | jq "length")
	if [ -z "$results_count" ]
	then
		results_count=0
	fi
	result_counter=0
	while [ $result_counter -lt $results_count ]
	do
		single_result_obj=$(echo "$results" | jq ".[$result_counter]")
		gid=$(echo "$single_result_obj" | jq -r ".gid")
		single_result_obj=$(echo "$single_result_obj" | jq "del(.gid)")
		echo "gid: $gid"
		output=$(output-result "$single_result_obj")
		if [ -n "$output" ]
		then
			echo "$output"
		fi
		echo ""
		result_counter=$(($result_counter+1))
	done
}

# Start aria2d if connected to VPN, or stop if not connected to VPN
current_ip=$(whatismyip)
actual_ip=$(cat "/shared/.$prog_name/ip")
if [ -z "$(pgrep aria2d)" ]
then
	if [ -n "$actual_ip" ] && [ "$actual_ip" != "$current_ip" ] && [ -n "$(pgrep openvpn)" ]
	then
		sudo service aria2d start
	fi
elif [ -z "$(pgrep openvpn)" ] || [ "$actual_ip" == "$current_ip" ]
then
	sudo service aria2d stop
fi

# TODO add better error handling when they finally decide to add it to aria2

if [ "$1" == "add" ]
then
	# Read the arguments
	url="$2"
	if [ -z "$url" ]
	then
		>&2 echo "add requires a torrent path, URL, or magnet link to be given"
		# TODO show usage
		exit $EXITCODE_BAD_ARGS
	fi
	options="$3"
	if [ -z "$options" ]
	then
		options="{}"
	fi
	options_type=$(echo "$options" | jq -r "type")
	if [ "$options_type" != "object" ]
	then
		>&2 echo "options must be a json object"
		#TODO show usage
		exit $EXITCODE_BAD_ARGS
	fi

	# Create a unique folder to store the download
	foldername=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 16)
	while [ -d "$DOWNLOADS_ROOT/$foldername" ]
	do
		foldername=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 16)
	done
	mkdir -p "$DOWNLOADS_ROOT/$foldername"

	# Make the request
	escaped_folderpath=$(json-escape "$DOWNLOADS_ROOT/$foldername")
	options=$(echo "$options" | jq ".dir = \"$escaped_folderpath\"")
	options=$(echo "$options" | jq ".gid = \"$foldername\"")
	if [[ "$url" =~ ^[0-9a-zA-Z_\-]+:\/\/.* ]] || [[ "$url" =~ magnet:\?xt=.* ]]
	then
		# URL or magnet link
		escaped_url=$(json-escape "$url")
		post_params="[\"$escaped_url\"], $options"
		post_data=$(rpc-post-data "aria2.addUri" "$post_params")
	else
		# File
		if [ ! -f "$url" ]
		then
			>&2 echo "could not open file $url"
			exit $EXITCODE_FILE_NOT_FOUND
		fi
		mime_type=$(file -b --mime-type "$url")
		if [ "$mime_type" == "application/x-bittorrent" ]
		then
			# Torrent
			file_contents=$(cat "$url" | base64)
			file_contents=$(json-escape "$file_contents")
			post_params="\"$file_contents\", [], $options"
			post_data=$(rpc-post-data "aria2.addTorrent" "$post_params")
		elif [ "$mime_type" == "application/metalink4+xml" ]
		then
			# Metalink
			file_contents=$(cat "$url" | base64)
			file_contents=$(json-escape "$file_contents")
			post_params="\"$file_contents\", $options"
			post_data=$(rpc-post-data "aria2.addMetalink" "$post_params")
		elif [ -z "$mime_type" ]
		then
			>&2 echo "unable to determine file mime-type"
			exit $EXITCODE_UNKNOWN_MIME_TYPE
		else
			>&2 echo "unsupported file mime-type \"$mime_type\""
			exit $EXITCODE_UNSUPPORTED_MIME_TYPE
		fi
	fi
	resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
	if [ -z "$resp" ]
	then
		rm -rf "$DOWNLOADS_ROOT/$foldername"
		>&2 echo "an unknown error occured"
		exit $EXITCODE_UNKNOWN_ERROR
	fi
	result_obj=$(echo "$resp" | jq ".result")
	if [ "$result_obj" == "null" ]
	then
		rm -rf "$DOWNLOADS_ROOT/$foldername"
		>&2 echo "an unknown error occured"
		exit $EXITCODE_UNKNOWN_ERROR
	fi

	# Make another request to check the status of the download
	gid=$(echo "$resp" | jq -r ".result")
	escaped_gid=$(json-escape "$gid")
	post_data2=$(rpc-post-data "aria2.tellStatus" "\"$escaped_gid\"")
	resp2=$(wget -q -O - "$RPC_URL" --post-data="$post_data2")

	status=$(echo "$resp2" | jq -r ".result.status")
	if [ "$status" == "error" ]
	then
		# Remove the broken download and exit
		>&2 echo "unable to start download"
		error_code=$(echo "$resp2" | jq -r ".result.errorCode")
		post_data3=$(rpc-post-data "aria2.remove" "\"$escaped_gid\"")
		wget -q "$RPC_URL" --post-data="$post_data3"
		post_data4=$(rpc-post-data "aria2.removeDownloadResult" "\"$escaped_gid\"")
		wget -q "$RPC_URL" --post-data="$post_data4"
		rm -rf "$DOWNLOADS_ROOT/$foldername"
		exit "$errorCode"
	fi

	echo "Download added successfully"
	echo "GID: $gid"
elif [ "$1" == "remove" ]
then
	# Read the arguments
	gid=
	delete=false
	arg_counter=2
	while [ $arg_counter -le $# ]
	do
		arg=${!arg_counter}
		if [ "$arg" == "-d" ] || [ "$arg" == "--delete" ]
		then
			delete=true
		else
			if [[ "$arg" =~ ^- ]]
			then
				>&2 echo "unrecognized argument $arg"
				exit $EXITCODE_BAD_ARGS
			elif [ -z "$gid" ]
			then
				gid="$arg"
			else
				>&2 echo "unrecognized argument $arg"
				exit $EXITCODE_BAD_ARGS
			fi
		fi
		arg_counter=$(($arg_counter+1))
	done
	if [ -z "$gid" ]
	then
		>&2 echo "no GID specified"
		# TODO show usage
		exit $EXITCODE_BAD_ARGS
	fi

	# Make request for the download's dir option
	escaped_gid=$(json-escape "$gid")
	post_data=$(rpc-post-data "aria2.tellStatus" "\"$escaped_gid\"")
	resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
	if [ -z "$resp" ]
	then
		>&2 echo "no download exists with the gid $gid"
		exit $EXITCODE_DOWNLOAD_NOT_FOUND
	fi
	result_obj=$(echo "$resp" | jq ".result")
	if [ "$result_obj" == "null" ] || [ "$result_obj" == "undefined" ]
	then
		rm -rf "$DOWNLOADS_ROOT/$foldername"
		>&2 echo "an unknown error occured"
		exit $EXITCODE_UNKNOWN_ERROR
	fi
	download_dir=$(echo "$resp" | jq -r ".result.dir")
	status=$(echo "$resp" | jq -r ".result.status")

	# Make "remove" request
	if [ "$status" != "removed" ] && [ "$status" != "complete" ] && [ "$status" != "error" ]
	then
		post_data3=$(rpc-post-data "aria2.remove" "\"$escaped_gid\"")
		resp3=$(wget -q -O - "$RPC_URL" --post-data="$post_data3")
		removed_gid=$(echo "$resp3" | jq -r ".result")
		if [ -z "$removed_gid" ] || [ "$removed_gid" == "null" ]
		then
			>&2 echo "aria2 could not find the download"
			exit $EXITCODE_DOWNLOAD_NOT_FOUND
		fi
		resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
		status=$(echo "$resp" | jq -r ".result.status")
		check_count=0
		while [ "$status" != "removed" ] && [ -n "$status" ] && [ "$status" != "null" ]
		do
			if [ "$check_count" -ge "5" ]
			then
				echo "removal is taking too long... force removing..."
				forceremove_post_data=$(rpc-post-data "aria2.forceRemove" "\"$escaped_gid\"")
				forceremove_resp=$(wget -q -O - "$RPC_URL" --post-data="$forceremove_post_data")
			fi
			sleep 0.2
			resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
			status=$(echo "$resp" | jq -r ".result.status")
			check_count=$(($check_count+1))
		done
		echo "removed download $removed_gid"
	fi

	# Get the status again to make sure the download result hasn't already been removed
	resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
	if [ -n "$resp" ]
	then
		# Remove the download status
		post_data4=$(rpc-post-data "aria2.removeDownloadResult" \"$escaped_gid\")
		resp4=$(wget -q -O - "$RPC_URL" --post-data="$post_data4")
		resp4_result=$(echo "$resp4" | jq -r ".result")
		if [ "$resp4_result" != "OK" ]
		then
			echo "aria2 couldn't remove the download result"
		fi
	fi

	# Remove the download folder if delete option is given
	if $delete
	then
		rm -rf "$download_dir"
	fi

	echo "done"
# TODO removeall subcommand
elif [ "$1" == "list" ]
then
	# Read the arguments
	if [ "$2" != "all" ] && [ "$2" != "active" ] && [ "$2" != "waiting" ] && [ "$2" != "stopped" ] && [ -n "$2" ]
	then
		>&2 echo "unknown download state $2"
		exit $EXITCODE_BAD_ARGS
	fi
	properties=()
	arg_counter=3
	while [ $arg_counter -le $# ]
	do
		arg=${!arg_counter}
		if [ "$arg" == "-i" ] || [ "$arg" == "--include" ]
		then
			arg_counter=$(($arg_counter+1))
			val=${!arg_counter}
			if [ -z "$val" ]
			then
				>&2 echo "$arg argument requires a value"
				exit $EXITCODE_BAD_ARGS
			fi
			properties+=("$val")
		elif [[ "$arg" =~ ^--include=(.*)$ ]]
		then
			val=${BASH_REMATCH[1]}
			if [ -z "$val" ]
			then
				>&2 echo "--include argument requires a value"
				exit $EXITCODE_BAD_ARGS
			fi
			properties+=("$val")
		else
			>&2 echo "unrecognized argument $arg"
			exit $EXITCODE_BAD_ARGS
		fi
		arg_counter=$(($arg_counter+1))
	done

	# Make sure either properties is empty or gid is specified
	if [ ${#properties[@]} -gt 0 ]
	then
		has_gid=false
		for property in "$properties"
		do
			if [ "$property" == "gid" ]
			then
				has_gid=true
				break
			fi
		done
		if ! $has_gid
		then
			properties+=("gid")
		fi
	fi

	# Request counts of downloads
	stat_post_data=$(rpc-post-data "aria2.getGlobalStat")
	stat_resp=$(wget -q -O - "$RPC_URL" --post-data="$stat_post_data")
	if [ -z "$stat_resp" ]
	then
		>&2 echo "an unknown error occurred"
		exit $EXITCODE_UNKNOWN_ERROR
	fi
	result_obj=$(echo "$stat_resp" | jq ".result")
	if [ "$result_obj" == "null" ]
	then
		>&2 echo "an unknown error occured"
		exit $EXITCODE_UNKNOWN_ERROR
	fi
	numActive=$(echo "$result_obj" | jq -r ".numActive")
	numWaiting=$(echo "$result_obj" | jq -r ".numWaiting")
	numStopped=$(echo "$result_obj" | jq -r ".numStopped")

	# Build keys list
	post_params=
	property_counter=0
	property_count=${#properties[@]}
	while [ $property_counter -lt $property_count ]
	do
		if [ $property_counter -ne 0 ]
		then
			post_params="$post_params,"
		fi
		property=${properties[$property_counter]}
		escaped_property=$(json-escape "$property")
		post_params="$post_params\"$escaped_property\""
		property_counter=$(($property_counter+1))
	done

	# Active downloads
	if [ "$2" == "all" ] || [ "$2" == "active" ] || [ -z "$2" ]
	then
		list-downloads "aria2.tellActive" "$post_params"
	fi

	# Waiting downloads
	if [ "$2" == "all" ] || [ "$2" == "waiting" ] || [ -z "$2" ]
	then
		list-downloads "aria2.tellWaiting" "0, $numWaiting, [$post_params]"
	fi

	# Stopped downloads
	if [ "$2" == "all" ] || [ "$2" == "stopped" ] || [ -z "$2" ]
	then
		list-downloads "aria2.tellStopped" "0, $numStopped, [$post_params]"
	fi
elif [ "$1" == "status" ]
then
	# Read arguments
	gids=()
	properties=()
	arg_counter=2
	while [ $arg_counter -le $# ]
	do
		arg=${!arg_counter}
		if [ "$arg" == "-i" ] || [ "$arg" == "--include" ]
		then
			arg_counter=$(($arg_counter+1))
			val=${!arg_counter}
			if [ -z "$val" ]
			then
				>&2 echo "$arg argument requires a value"
				exit $EXITCODE_BAD_ARGS
			fi
			properties+=("$val")
		elif [[ "$arg" =~ ^--include=(.*)$ ]]
		then
			val=${BASH_REMATCH[1]}
			if [ -z "$val" ]
			then
				>&2 echo "--include argument requires a value"
				exit $EXITCODE_BAD_ARGS
			fi
			properties+=("$val")
		else
			if [[ "$arg" =~ ^- ]]
			then
				>&2 echo "unrecognized argument $arg"
				exit $EXITCODE_BAD_ARGS
			else
				gids+=("$arg")
			fi
		fi
		arg_counter=$(($arg_counter+1))
	done

	gid_count=${#gids[@]}
	property_count=${#properties[@]}
	if [ "$gid_count" -gt 0 ]
	then
		# Request status for one or more downloads
		gid_counter=0
		post_params="["
		while [ $gid_counter -lt $gid_count ]
		do
			if [ $gid_counter -ne 0 ]
			then
				post_params="$post_params,"
			fi
			gid=${gids[$gid_counter]}
			escaped_gid=$(json-escape "$gid")
			post_params="$post_params{\"methodName\":\"aria2.tellStatus\",\"params\":[\"$escaped_gid\""
			if [ $property_count -gt 0 ]
			then
				post_params="$post_params,["
				property_counter=0
				while [ $property_counter -lt $property_count ]
				do
					if [ $property_counter -ne 0 ]
					then
						post_params="$post_params,"
					fi
					property=${properties[$property_counter]}
					escaped_property=$(json-escape "$property")
					post_params="$post_params\"$escaped_property\""
					property_counter=$(($property_counter+1))
				done
				post_params="$post_params]"
			fi
			post_params="$post_params]}"
			gid_counter=$(($gid_counter+1))
		done
		post_params="$post_params]"
		post_data=$(rpc-post-data "system.multicall" "$post_params")
		resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
		if [ -z "$resp" ]
		then
			>&2 echo "an unknown error occurred"
			exit $EXITCODE_UNKNOWN_ERROR
		fi
		result_obj=$(echo "$resp" | jq ".result")
		if [ "$result_obj" == "null" ]
		then
			>&2 echo "an unknown error occured"
			exit $EXITCODE_UNKNOWN_ERROR
		fi

		# Output each GID's status
		result_length=$(echo "$result_obj" | jq "length")
		result_counter=0
		while [ $result_counter -lt $result_length ]
		do
			gid=${gids[$result_counter]}
			single_result_obj=$(echo "$result_obj" | jq ".[$result_counter]")
			single_result_type=$(echo "$single_result_obj" | jq -r "type")
			if [ "$single_result_type" == "array" ]
			then
				single_result_obj=$(echo "$single_result_obj" | jq ".[0]")
			fi
			single_result_obj=$(echo "$single_result_obj" | jq "del(.gid)")
			echo "gid: $gid"
			output=$(output-result "$single_result_obj")
			if [ -n "$output" ]
			then
				echo "$output"
			fi
			echo ""
			result_counter=$(($result_counter+1))
		done
	else
		# TODO add manual property filtering
		if [ $property_count -gt 0 ]
		then
			>&2 echo "properties can only be specified if a GID is specified"
			exit $EXITCODE_BAD_ARGS
		fi

		# Request global status
		post_data=$(rpc-post-data "aria2.getGlobalStat")
		resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
		if [ -z "$resp" ]
		then
			>&2 echo "an unknown error occurred"
			exit $EXITCODE_UNKNOWN_ERROR
		fi
		result_obj=$(echo "$resp" | jq ".result")
		if [ "$result_obj" == "null" ]
		then
			>&2 echo "an unknown error occured"
			exit $EXITCODE_UNKNOWN_ERROR
		fi

		# Output status
		output=$(output-result "$result_obj")
		echo "$output"
	fi
fi

