#!/bin/bash

prog_name=cloakbox

readonly EXITCODE_UNKNOWN_ERROR=1
readonly EXITCODE_BAD_ARGS=28

readonly EXITCODE_FILE_NOT_FOUND=101
readonly EXITCODE_UNKNOWN_MIME_TYPE=102
readonly EXITCODE_UNSUPPORTED_MIME_TYPE=103
readonly EXITCODE_DOWNLOAD_NOT_FOUND=104

base_dir=$(dirname "${BASH_SOURCE[0]}")

function fullpath
{
	cd "$1"
	echo "$PWD"
}

function setup
{
	mkdir -p "openvpn"
	mkdir -p "shared/.$prog_name"
	mkdir -p "shared/downloads"

	vagrant plugin install vagrant-vbguest
	vagrant plugin install vagrant-sshfs

	touch "shared/.$prog_name/setup_done"
}

function escape-cmd-string
{
	str="$1"
	escaped_str=$(echo "$str" | tr '\n' ' ')
	escaped_str=${str//"'"/"'\"'\"'"}
	echo "'${escaped_str}'"
}

if [ "$1" == "setup" ]
then
	cd "$base_dir"
	setup
elif [ "$1" == "start" ]
then
	cd "$base_dir"
	if [ ! -f "shared/.$prog_name/setup_done" ]
	then
		setup
	fi
	vagrant up
	retval=$?
	exit $retval
elif [ "$1" == "stop" ]
then
	cd "$base_dir"
	vagrant halt
	retval=$?
	exit $retval
elif [ "$1" == "ssh" ]
then
	export VAGRANT_CWD=$(fullpath "$base_dir")
	shift
	vagrant ssh "$@"
	retval=$?
	exit $retval
elif [ "$1" == "ip" ]
then
	cd "$base_dir"
	vagrant ssh -c "whatismyip" -- -q
	retval=$?
	exit $retval
elif [ "$1" == "download" ]
then
	readonly DOWNLOADS_ROOT="/shared/downloads"
	readonly RPC_URL="http://localhost:6803/jsonrpc"
	readonly RPC_TOKEN=$(cat "$base_dir/shared/.$prog_name/secret")

	function json-escape
	{
		json_str="$1"
		echo "${json_str//'"'/'\"'}"
	}

	function rpc-post-data # params
	{
		params="$2"
		escaped_method=$(json-escape "$1")
		if [ "$1" != "system.multicall" ]
		then
			escaped_token=$(json-escape "token:$RPC_TOKEN")
			if [ -z "$params" ]
			then
				params="\"$escaped_token\""
			else
				params="\"$escaped_token\",$params"
			fi
		fi
		echo "{\"jsonrpc\":\"2.0\", \"id\":\"$prog_name\", \"method\":\"$escaped_method\", \"params\":[$params]}"
	}

	function output-result # result, prefix
	{
		result=$(echo "$1" | jq "del(.dir)") # Remove download dir attribute
		prefix="$2"
		keys=$(echo "$result" | jq "keys")
		keys_length=$(echo "$keys" | jq "length")
		key_counter=0
		while [ "$key_counter" -lt "$keys_length" ]
		do
			key=$(echo "$keys" | jq -r ".[$key_counter]")
			escaped_key=$(json-escape "$key")
			value_obj=$(echo "$result" | jq ".\"$escaped_key\"")
			value_type=$(echo "$value_obj" | jq -r "type")
			if [ "$value_type" == "string" ]
			then
				value=$(echo "$value_obj" | jq -r ".")
				if [ -n "$value" ]
				then
					echo "$prefix$key: $value"
				fi
			elif [ "$value_type" == "object" ]
			then
				sub_values=$(output-result "$value_obj" "$prefix$key.")
				echo "$sub_values"
			fi
			key_counter=$(($key_counter+1))
		done
	}

	function list-downloads # method, params
	{
		# Request downloads
		post_data=$(rpc-post-data "$1" "$2")
		resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")

		# Output downloads
		results=$(echo "$resp" | jq ".result")
		results_count=$(echo "$results" | jq "length")
		if [ -z "$results_count" ]
		then
			results_count=0
		fi
		result_counter=0
		while [ $result_counter -lt $results_count ]
		do
			single_result_obj=$(echo "$results" | jq ".[$result_counter]")
			gid=$(echo "$single_result_obj" | jq -r ".gid")
			single_result_obj=$(echo "$single_result_obj" | jq "del(.gid)")
			echo "gid: $gid"
			output=$(output-result "$single_result_obj")
			if [ -n "$output" ]
			then
				echo "$output"
			fi
			echo ""
			result_counter=$(($result_counter+1))
		done
	}

	if [ "$2" == "add" ]
	then
		# Read the arguments
		url="$3"
		if [ -z "$url" ]
		then
			>&2 echo "add requires a torrent path, URL, or magnet link to be given"
			# TODO show usage
			exit $EXITCODE_BAD_ARGS
		fi

		# Create a unique folder to store the download
		foldername=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 16)
		while [ -d "$base_dir$DOWNLOADS_ROOT/$foldername" ]
		do
			foldername=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 16)
		done
		mkdir -p "$base_dir$DOWNLOADS_ROOT/$foldername"

		# Make the request
		escaped_folderpath=$(json-escape "$DOWNLOADS_ROOT/$foldername")
		options="{\"dir\":\"$escaped_folderpath\", \"gid\":\"$foldername\"}"
		if [[ "$url" =~ ^[0-9a-zA-Z_\-]+:\/\/.* ]] || [[ "$url" =~ magnet:\?xt=.* ]]
		then
			# URL or magnet link
			escaped_url=$(json-escape "$url")
			post_params="[\"$escaped_url\"], $options"
			post_data=$(rpc-post-data "aria2.addUri" "$post_params")
		else
			# File
			if [ ! -f "$url" ]
			then
				>&2 echo "could not open file $url"
				exit $EXITCODE_FILE_NOT_FOUND
			fi
			mime_type=$(mimetype -b "$url")
			if [ "$mime_type" == "application/x-bittorrent" ]
			then
				# Torrent
				file_contents=$(cat "$url" | base64)
				file_contents=$(json-escape "$file_contents")
				post_params="\"$file_contents\", [], $options"
				post_data=$(rpc-post-data "aria2.addTorrent" "$post_params")
			elif [ "$mime_type" == "application/metalink4+xml" ]
			then
				# Metalink
				file_contents=$(cat "$url" | base64)
				file_contents=$(json-escape "$file_contents")
				post_params="\"$file_contents\", $options"
				post_data=$(rpc-post-data "aria2.addMetalink" "$post_params")
			elif [ -z "$mime_type" ]
			then
				>&2 echo "unable to determine file mime-type"
				exit $EXITCODE_UNKNOWN_MIME_TYPE
			else
				>&2 echo "unsupported file mime-type \"$mime_type\""
				exit $EXITCODE_UNSUPPORTED_MIME_TYPE
			fi
		fi
		resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
		if [ -z "$resp" ]
		then
			rm -rf "$base_dir$DOWNLOADS_ROOT/$foldername"
			>&2 echo "an unknown error occured"
			exit $EXITCODE_UNKNOWN_ERROR
		fi
		result_obj=$(echo "$resp" | jq ".result")
		if [ "$result_obj" == "null" ]
		then
			rm -rf "$base_dir$DOWNLOADS_ROOT/$foldername"
			>&2 echo "an unknown error occured"
			exit $EXITCODE_UNKNOWN_ERROR
		fi

		# Make another request to check the status of the download
		gid=$(echo "$resp" | jq -r ".result")
		escaped_gid=$(json-escape "$gid")
		post_data2=$(rpc-post-data "aria2.tellStatus" "\"$escaped_gid\"")
		resp2=$(wget -q -O - "$RPC_URL" --post-data="$post_data2")

		status=$(echo "$resp2" | jq -r ".result.status")
		if [ "$status" == "error" ]
		then
			# Remove the broken download and exit
			>&2 echo "unable to start download"
			error_code=$(echo "$resp2" | jq -r ".result.errorCode")
			if [ -z "$error_code" ]
			then
				error_code=$(echo "$resp2" | jq -r ".result.code")
				if [ -z "$error_code" ]
				then
					error_code=$EXITCODE_UNKNOWN_ERROR
				fi
			fi
			post_data3=$(rpc-post-data "aria2.forceRemove" "\"$escaped_gid\"")
			wget -q "$RPC_URL" --post-data="$post_data3"
			post_data4=$(rpc-post-data "aria2.removeDownloadResult" "\"$escaped_gid\"")
			wget -q "$RPC_URL" --post-data="$post_data4"
			rm -rf "$base_dir$DOWNLOADS_ROOT/$foldername"
			exit "$errorCode"
		fi

		echo "Download added successfully"
		echo "GID: $gid"
	elif [ "$2" == "remove" ]
	then
		# Read the arguments
		gid=
		delete=false
		arg_counter=3
		while [ $arg_counter -le $# ]
		do
			arg=${!arg_counter}
			if [ "$arg" == "-d" ] || [ "$arg" == "--delete" ]
			then
				delete=true
			else
				if [[ "$arg" =~ ^- ]]
				then
					>&2 echo "unrecognized argument $arg"
					exit $EXITCODE_BAD_ARGS
				elif [ -z "$gid" ]
				then
					gid="$arg"
				else
					>&2 echo "unrecognized argument $arg"
					exit $EXITCODE_BAD_ARGS
				fi
			fi
			arg_counter=$(($arg_counter+1))
		done
		if [ -z "$gid" ]
		then
			>&2 echo "no GID specified"
			# TODO show usage
			exit $EXITCODE_BAD_ARGS
		fi

		# Make request for the download's dir option
		escaped_gid=$(json-escape "$gid")
		post_data=$(rpc-post-data "aria2.tellStatus" "\"$escaped_gid\"")
		resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
		if [ -z "$resp" ]
		then
			>&2 echo "an unknown error occured"
			exit $EXITCODE_UNKNOWN_ERROR
		fi
		result_obj=$(echo "$resp" | jq ".result")
		if [ "$result_obj" == "null" ] || [ "$result_obj" == "undefined" ]
		then
			>&2 echo "an unknown error occured"
			exit $EXITCODE_UNKNOWN_ERROR
		fi
		download_dir=$(echo "$resp" | jq -r ".result.dir")
		status=$(echo "$resp" | jq -r ".result.status")

		# Make "remove" request
		if [ "$status" != "removed" ] && [ "$status" != "complete" ] && [ "$status" != "error" ]
		then
			post_data3=$(rpc-post-data "aria2.remove" "\"$escaped_gid\"")
			resp3=$(wget -q -O - "$RPC_URL" --post-data="$post_data3")
			removed_gid=$(echo "$resp3" | jq -r ".result")
			if [ -z "$removed_gid" ] || [ "$removed_gid" == "null" ]
			then
				>&2 echo "aria2 could not find the download"
				exit $EXITCODE_DOWNLOAD_NOT_FOUND
			fi
			resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
			status=$(echo "$resp" | jq -r ".result.status")
			check_count=0
			while [ "$status" != "removed" ] && [ -n "$status" ] && [ "$status" != "null" ]
			do
				if [ "$check_count" -ge "5" ]
				then
					echo "removal is taking too long... force removing..."
					forceremove_post_data=$(rpc-post-data "aria2.forceRemove" "\"$escaped_gid\"")
					forceremove_resp=$(wget -q -O - "$RPC_URL" --post-data="$forceremove_post_data")
				fi
				sleep 0.2
				resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
				status=$(echo "$resp" | jq -r ".result.status")
				check_count=$(($check_count+1))
			done
			echo "removed download $removed_gid"
		fi

		# Get the status again to make sure the download result hasn't already been removed
		resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
		if [ -n "$resp" ]
		then
			# Remove the download status
			post_data4=$(rpc-post-data "aria2.removeDownloadResult" \"$escaped_gid\")
			resp4=$(wget -q -O - "$RPC_URL" --post-data="$post_data4")
			resp4_result=$(echo "$resp4" | jq -r ".result")
			if [ "$resp4_result" != "OK" ]
			then
				echo "aria2 couldn't remove the download result"
			fi
		fi

		retval=0

		# Remove the download folder if delete option is given
		if $delete
		then
			escaped_download_dir=$(escape-cmd-string "$download_dir")
			vagrant ssh -c "rm -rf $escaped_download_dir" -- -q
			retval=$?
			if [ $retval -eq 0 ]
			then
				echo "deleted download $gid"
			fi
		fi

		if [ $retval -eq 0 ]
		then
			echo "done"
		fi
		exit $retval
	elif [ "$2" == "list" ]
	then
		# Read the arguments
		if [ "$3" != "all" ] && [ "$3" != "active" ] && [ "$3" != "waiting" ] && [ "$3" != "stopped" ] && [ -n "$3" ]
		then
			>&2 echo "unknown category $3"
			exit $EXITCODE_BAD_ARGS
		fi
		properties=()
		arg_counter=4
		while [ $arg_counter -le $# ]
		do
			arg=${!arg_counter}
			if [ "$arg" == "-i" ] || [ "$arg" == "--include" ]
			then
				arg_counter=$(($arg_counter+1))
				val=${!arg_counter}
				if [ -z "$val" ]
				then
					>&2 echo "$arg argument requires a value"
					exit $EXITCODE_BAD_ARGS
				fi
				properties+=("$val")
			elif [[ "$arg" =~ ^--include=(.*)$ ]]
			then
				val=${BASH_REMATCH[1]}
				if [ -z "$val" ]
				then
					>&2 echo "--include argument requires a value"
					exit $EXITCODE_BAD_ARGS
				fi
				properties+=("$val")
			else
				>&2 echo "unrecognized argument $arg"
				exit $EXITCODE_BAD_ARGS
			fi
			arg_counter=$(($arg_counter+1))
		done

		# Make sure either properties is empty or gid is specified
		if [ ${#properties[@]} -gt 0 ]
		then
			has_gid=false
			for property in "$properties"
			do
				if [ "$property" == "gid" ]
				then
					has_gid=true
					break
				fi
			done
			if ! $has_gid
			then
				properties+=("gid")
			fi
		fi

		# Request counts of downloads
		stat_post_data=$(rpc-post-data "aria2.getGlobalStat")
		stat_resp=$(wget -q -O - "$RPC_URL" --post-data="$stat_post_data")
		if [ -z "$stat_resp" ]
		then
			>&2 echo "an unknown error occurred"
			exit $EXITCODE_UNKNOWN_ERROR
		fi
		result_obj=$(echo "$stat_resp" | jq ".result")
		if [ "$result_obj" == "null" ]
		then
			>&2 echo "an unknown error occured"
			exit $EXITCODE_UNKNOWN_ERROR
		fi
		numActive=$(echo "$result_obj" | jq -r ".numActive")
		numWaiting=$(echo "$result_obj" | jq -r ".numWaiting")
		numStopped=$(echo "$result_obj" | jq -r ".numStopped")

		# Build keys list
		post_params=
		property_counter=0
		property_count=${#properties[@]}
		while [ $property_counter -lt $property_count ]
		do
			if [ $property_counter -ne 0 ]
			then
				post_params="$post_params,"
			fi
			property=${properties[$property_counter]}
			escaped_property=$(json-escape "$property")
			post_params="$post_params\"$escaped_property\""
			property_counter=$(($property_counter+1))
		done

		# Active downloads
		if [ "$3" == "all" ] || [ "$3" == "active" ] || [ -z "$3" ]
		then
			list-downloads "aria2.tellActive" "$post_params"
		fi

		# Waiting downloads
		if [ "$3" == "all" ] || [ "$3" == "waiting" ] || [ -z "$3" ]
		then
			list-downloads "aria2.tellWaiting" "0, $numWaiting, [$post_params]"
		fi

		# Stopped downloads
		if [ "$3" == "all" ] || [ "$3" == "stopped" ] || [ -z "$3" ]
		then
			list-downloads "aria2.tellStopped" "0, $numStopped, [$post_params]"
		fi
	elif [ "$2" == "status" ]
	then
		# Read arguments
		gids=()
		properties=()
		arg_counter=3
		while [ $arg_counter -le $# ]
		do
			arg=${!arg_counter}
			if [ "$arg" == "-i" ] || [ "$arg" == "--include" ]
			then
				arg_counter=$(($arg_counter+1))
				val=${!arg_counter}
				if [ -z "$val" ]
				then
					>&2 echo "$arg argument requires a value"
					exit $EXITCODE_BAD_ARGS
				fi
				properties+=("$val")
			elif [[ "$arg" =~ ^--include=(.*)$ ]]
			then
				val=${BASH_REMATCH[1]}
				if [ -z "$val" ]
				then
					>&2 echo "--include argument requires a value"
					exit $EXITCODE_BAD_ARGS
				fi
				properties+=("$val")
			else
				if [[ "$arg" =~ ^- ]]
				then
					>&2 echo "unrecognized argument $arg"
					exit $EXITCODE_BAD_ARGS
				else
					gids+=("$arg")
				fi
			fi
			arg_counter=$(($arg_counter+1))
		done

		escaped_token=$(json-escape "token:$RPC_TOKEN")

		gid_count=${#gids[@]}
		property_count=${#properties[@]}
		if [ "$gid_count" -gt 0 ]
		then
			# Request status for one or more downloads
			gid_counter=0
			post_params="["
			while [ $gid_counter -lt $gid_count ]
			do
				if [ $gid_counter -ne 0 ]
				then
					post_params="$post_params,"
				fi
				gid=${gids[$gid_counter]}
				escaped_gid=$(json-escape "$gid")
				post_params="$post_params{\"methodName\":\"aria2.tellStatus\",\"params\":[\"$escaped_token\",\"$escaped_gid\""
				if [ $property_count -gt 0 ]
				then
					post_params="$post_params,["
					property_counter=0
					while [ $property_counter -lt $property_count ]
					do
						if [ $property_counter -ne 0 ]
						then
							post_params="$post_params,"
						fi
						property=${properties[$property_counter]}
						escaped_property=$(json-escape "$property")
						post_params="$post_params\"$escaped_property\""
						property_counter=$(($property_counter+1))
					done
					post_params="$post_params]"
				fi
				post_params="$post_params]}"
				gid_counter=$(($gid_counter+1))
			done
			post_params="$post_params]"
			post_data=$(rpc-post-data "system.multicall" "$post_params")
			resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
			if [ -z "$resp" ]
			then
				>&2 echo "an unknown error occurred"
				exit $EXITCODE_UNKNOWN_ERROR
			fi
			result_obj=$(echo "$resp" | jq ".result")
			if [ "$result_obj" == "null" ]
			then
				>&2 echo "an unknown error occured"
				exit $EXITCODE_UNKNOWN_ERROR
			fi

			# Output each GID's status
			result_length=$(echo "$result_obj" | jq "length")
			result_counter=0
			while [ $result_counter -lt $result_length ]
			do
				gid=${gids[$result_counter]}
				single_result_obj=$(echo "$result_obj" | jq ".[$result_counter]")
				single_result_type=$(echo "$single_result_obj" | jq -r "type")
				if [ "$single_result_type" == "array" ]
				then
					single_result_obj=$(echo "$single_result_obj" | jq ".[0]")
				fi
				single_result_obj=$(echo "$single_result_obj" | jq "del(.gid)")
				echo "gid: $gid"
				output=$(output-result "$single_result_obj")
				if [ -n "$output" ]
				then
					echo "$output"
				fi
				echo ""
				result_counter=$(($result_counter+1))
			done
		else
			# TODO add manual property filtering
			if [ $property_count -gt 0 ]
			then
				>&2 echo "properties can only be specified if a GID is specified"
				exit $EXITCODE_BAD_ARGS
			fi

			# Request global status
			post_data=$(rpc-post-data "aria2.getGlobalStat")
			resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
			if [ -z "$resp" ]
			then
				>&2 echo "an unknown error occurred"
				exit $EXITCODE_UNKNOWN_ERROR
			fi
			result_obj=$(echo "$resp" | jq ".result")
			if [ "$result_obj" == "null" ]
			then
				>&2 echo "an unknown error occured"
				exit $EXITCODE_UNKNOWN_ERROR
			fi

			# Output status
			output=$(output-result "$result_obj")
			echo "$output"
		fi
	else
		if [ -z "$2" ]
		then
			# TODO echo usage
			echo "you must give a subcommand"
			exit $EXITCODE_BAD_ARGS
		else
			echo "unrecognized subcommand $2"
			exit $EXITCODE_BAD_ARGS
		fi
	fi
elif [ "$1" == "updatesettings" ]
then
	reboot=false
	arg_counter=2
	while [ $arg_counter -le $# ]
	do
		arg=${!arg_counter}
		if [ "$arg" == "-r" ] || [ "$arg" == "--reboot" ]
		then
			reboot=true
		else
			>&2 echo "unrecognized argument $arg"
			exit $EXITCODE_BAD_ARGS
		fi
		arg_counter=$(($arg_counter+1))
	done
	cd "$base_dir"
	if [ ! -f "shared/.$prog_name/setup_done" ]
	then
		setup
	fi
	current_ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
	mkdir -p "shared/.$prog_name"
	echo "$current_ip" > "shared/.$prog_name/ip"
	# TODO mutex lock this command
	vagrant up --provision
	mkdir -p "shared/.$prog_name/tmp"
	rm -rf "shared/.$prog_name/tmp/openvpn"
	cp -r "openvpn" "shared/.$prog_name/tmp/openvpn"
	cmds_to_run=$(cat <<EOF
sudo service openvpn stop
cd /etc/openvpn
files=(*)
for file in "$files"
do
	if [ "$file" != "update-resolv-conf" ]
	then
		sudo rm -rf "$file"
	fi
done
sudo cp -n -t /etc/openvpn/ /shared/.$prog_name/tmp/openvpn/*
rm -rf /shared/.$prog_name/tmp/openvpn
sudo service openvpn start
EOF
	)
	echo "setting up openvpn inside of cloakbox"
	vagrant ssh -c "$cmds_to_run" -- -q
	retval=$?
	if $reboot
	then
		sleep 1
		# Restart VM after updating openvpn settings
		vagrant halt
		vagrant up
	fi
	exit $retval
elif [ "$1" == "destroy" ]
then
	clean=false
	arg_counter=2
	while [ $arg_counter -le $# ]
	do
		arg=${!arg_counter}
		if [ "$arg" == "-c" ] || [ "$arg" == "--clean" ]
		then
			clean=true
		else
			>&2 echo "unrecognized argument $arg"
			exit $EXITCODE_BAD_ARGS
		fi
		arg_counter=$(($arg_counter+1))
	done

	cd "$base_dir"
	vagrant destroy -f
	retval=$?
	if $clean
	then
		rm -rf .vagrant
		rm -rf shared/*
		rm -rf "shared/.$prog_name"
		rm -rf *.log
	fi
	exit $retval
else
	if [ -z "$1" ]
	then
		>&2 echo "you must give a subcommand"
		exit $EXITCODE_BAD_ARGS
	else
		>&2 echo "unrecognized subcommand $1"
		exit $EXITCODE_BAD_ARGS
	fi
fi

