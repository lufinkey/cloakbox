#!/bin/bash

prog_name=cloakbox

readonly EXITCODE_UNKNOWN_ERROR=1
readonly EXITCODE_BAD_ARGS=28

readonly EXITCODE_FILE_NOT_FOUND=101
readonly EXITCODE_UNKNOWN_MIME_TYPE=102
readonly EXITCODE_UNSUPPORTED_MIME_TYPE=103
readonly EXITCODE_DOWNLOAD_NOT_FOUND=104

readonly DOWNLOADS_ROOT="/shared/downloads"
readonly RPC_URL="http://localhost:6800/jsonrpc"

function json-escape
{
	json_str="$1"
	echo "${json_str,'"','\"'}"
}

function rpc-post-data
{
	escaped_method=$(json-escape "$1")
	echo "{\"jsonrpc\":\"2.0\", \"id\":\"$prog_name\", \"method\":\"$escaped_method\", \"params\":[$2]}"
}

function output-result
{
	result="$1"
	prefix="$2"
	keys=$(echo "$result" | jq "keys")
	keys_length=$(echo "$keys" | jq "length")
	key_counter=0
	while [ "$key_counter" -lt "$keys_length" ]
	do
		key=$(echo "$keys" | jq -r ".[$key_counter]")
		escaped_key=$(json-escape "$key")
		value_obj=$(echo "$result" | jq ".\"$escaped_key\"")
		value_type=$(echo "$value_obj" | jq -r "type")
		if [ "$value_type" == "string" ]
		then
			value=$(echo "$value_obj" | jq -r ".")
			if [ -n "$value" ]
			then
				echo "$prefix$key: $value"
			fi
		elif [ "$value_type" == "object" ]
		then
			sub_values=$(output-result "$value_obj" "$prefix$key.")
			echo "$sub_values"
		fi
		key_counter=$(($key_counter+1))
	done
}

# TODO add better error handling when they finally decide to add it to aria2

if [ "$1" == "add" ]
then
	# Read the arguments
	url="$2"
	if [ -z "$url" ]
	then
		>&2 echo "add requires a torrent path, URL, or magnet link to be given"
		# TODO show usage
		exit $EXITCODE_BAD_ARGS
	fi
	options="$3"
	if [ -z "$options" ]
	then
		options="{}"
	fi
	options_type=$(echo "$options" | jq -r "type")
	if [ "$options_type" != "object" ]
	then
		>&2 echo "options must be a json object type"
		#TODO show usage
		exit $EXITCODE_BAD_ARGS
	fi

	# Create a unique folder to store the download
	foldername=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32)
	while [ -d "$DOWNLOADS_ROOT/$foldername" ]
	do
		foldername=$(cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32)
	done
	mkdir -p "$DOWNLOADS_ROOT/$foldername"

	# Make the request
	escaped_folderpath=$(json-escape "$DOWNLOADS_ROOT/$foldername")
	options=$(echo "$options" | jq ".dir = \"$escaped_folderpath\"")
	if [[ "$url" =~ ^[0-9a-zA-Z_\-]+:\/\/.* ]] || [[ "$url" =~ magnet:\?xt=.* ]]
	then
		# URL or magnet link
		escaped_url=$(json-escape "$url")
		post_params="[\"$escaped_url\"], $options"
		post_data=$(rpc-post-data "aria2.addUri" "$post_params")
	else
		# File
		if [ ! -f "$url" ]
		then
			>&2 echo "could not open file $url"
			exit $EXITCODE_FILE_NOT_FOUND
		fi
		mime_type=$(file -b --mime-type "$url")
		if [ "$mime_type" == "application/x-bittorrent" ]
		then
			# Torrent
			file_contents=$(cat "$url" | base64)
			file_contents=$(json-escape "$file_contents")
			post_params="\"$file_contents\", [], $options"
			post_data=$(rpc-post-data "aria2.addTorrent" "$post_params")
		elif [ "$mime_type" == "application/metalink4+xml" ]
		then
			# Metalink
			file_contents=$(cat "$url" | base64)
			file_contents=$(json-escape "$file_contents")
			post_params="\"$file_contents\", $options"
			post_data=$(rpc-post-data "aria2.addMetalink" "$post_params")
		elif [ -z "$mime_type" ]
		then
			>&2 echo "unable to determine file mime-type"
			exit $EXITCODE_UNKNOWN_MIME_TYPE
		else
			>&2 echo "unsupported file mime-type \"$mime_type\""
			exit $EXITCODE_UNSUPPORTED_MIME_TYPE
		fi
	fi
	resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
	if [ -z "$resp" ]
	then
		rm -rf "$DOWNLOADS_ROOT/$foldername"
		>&2 echo "an unknown error occured"
		exit $EXITCODE_UNKNOWN_ERROR
	fi
	result_obj=$(echo "$resp" | jq ".result")
	if [ "$result_obj" == "null" ]
	then
		rm -rf "$DOWNLOADS_ROOT/$foldername"
		>&2 echo "an unknown error occured"
		exit $EXITCODE_UNKNOWN_ERROR
	fi

	# Make another request to check the status of the download
	gid=$(echo "$resp" | jq -r ".result")
	escaped_gid=$(json-escape "$gid")
	post_data2=$(rpc-post-data "aria2.tellStatus" "\"$escaped_gid\"")
	resp2=$(wget -q -O - "$RPC_URL" --post-data="$post_data2")

	status=$(echo "$resp2" | jq -r ".result.status")
	if [ "$status" == "error" ]
	then
		# Remove the broken download and exit
		>&2 echo "unable to start download"
		error_code=$(echo "$resp2" | jq -r ".result.errorCode")
		post_data3=$(rpc-post-data "aria2.remove" "\"$escaped_gid\"")
		wget -q "$RPC_URL" --post-data="$post_data3"
		post_data4=$(rpc-post-data "aria2.removeDownloadResult" "\"$escaped_gid\"")
		wget -q "$RPC_URL" --post-data="$post_data4"
		rm -rf "$DOWNLOADS_ROOT/$foldername"
		exit "$errorCode"
	fi

	echo "Download added successfully"
	echo "GID: $gid"
	echo "path: $DOWNLOADS_ROOT/$foldername"
	echo "status: $status"
elif [ "$1" == "remove" ]
then
	# Read the arguments
	gid=
	delete=false
	arg_counter=2
	while [ $arg_counter -le $# ]
	do
		arg=${!arg_counter}
		if [ "$arg" == "-d" ] || [ "$arg" == "--delete" ]
		then
			delete=true
		else
			if [[ "$arg" =~ ^- ]]
			then
				>&2 echo "unrecognized argument $arg"
				exit $EXITCODE_BAD_ARGS
			elif [ -z "$gid" ]
			then
				gid="$arg"
			else
				>&2 echo "unrecognized argument $arg"
				exit $EXITCODE_BAD_ARGS
			fi
		fi
		arg_counter=$(($arg_counter+1))
	done
	if [ -z "$gid" ]
	then
		>&2 echo "no GID specified"
		# TODO show usage
		exit $EXITCODE_BAD_ARGS
	fi

	# Make request for the download's dir option
	escaped_gid=$(json-escape "$gid")
	post_data=$(rpc-post-data "aria2.tellStatus" "\"$escaped_gid\"")
	resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
	if [ -z "$resp" ]
	then
		>&2 echo "no download exists with the gid $gid"
		exit $EXITCODE_DOWNLOAD_NOT_FOUND
	fi
	result_obj=$(echo "$resp" | jq ".result")
	if [ "$result_obj" == "null" ] || [ "$result_obj" == "undefined" ]
	then
		rm -rf "$DOWNLOADS_ROOT/$foldername"
		>&2 echo "an unknown error occured"
		exit $EXITCODE_UNKNOWN_ERROR
	fi
	download_dir=$(echo "$resp" | jq -r ".result.dir")
	status=$(echo "$resp" | jq -r ".result.status")

	# Make "remove" request
	if [ "$status" != "removed" ]
	then
		post_data3=$(rpc-post-data "aria2.remove" "\"$escaped_gid\"")
		resp3=$(wget -q -O - "$RPC_URL" --post-data="$post_data3")
		removed_gid=$(echo "$resp3" | jq -r ".result")
		if [ -z "$removed_gid" ] || [ "$removed_gid" == "null" ]
		then
			>&2 echo "aria2 could not find the download"
			exit $EXITCODE_DOWNLOAD_NOT_FOUND
		fi
		resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
		status=$(echo "$resp" | jq -r ".result.status")
		check_count=0
		while [ "$status" != "removed" ] && [ -n "$status" ] && [ "$status" != "null" ]
		do
			if [ "$check_count" -ge "5" ]
			then
				echo "removal is taking too long... force removing..."
				forceremove_post_data=$(rpc-post-data "aria2.forceRemove" "\"$escaped_gid\"")
				forceremove_resp=$(wget -q -O - "$RPC_URL" --post-data="$forceremove_post_data")
			fi
			sleep 0.2
			resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
			status=$(echo "$resp" | jq -r ".result.status")
			check_count=$(($check_count+1))
		done
		echo "removed download $removed_gid"
	fi

	# Get the status again to make sure the download result hasn't already been removed
	resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
	if [ -n "$resp" ]
	then
		# Remove the download status
		post_data4=$(rpc-post-data "aria2.removeDownloadResult" \"$escaped_gid\")
		resp4=$(wget -q -O - "$RPC_URL" --post-data="$post_data4")
		resp4_result=$(echo "$resp4" | jq -r ".result")
		if [ "$resp4_result" != "OK" ]
		then
			echo "aria2 couldn't remove the download result"
		fi
	fi

	# Remove the download folder if delete option is given
	if $delete
	then
		rm -rf "$download_dir"
	fi

	echo "done"
elif [ "$1" == "status" ]
then
	if [ -n "$2" ]
	then
		# Request status for single download
		gid="$2"
		escaped_gid=$(json-escape "$gid")
		post_data=$(rpc-post-data "aria2.tellStatus" "\"$escaped_gid\"")
	else
		# Request global status
		post_data=$(rpc-post-data "aria2.getGlobalStat")
	fi
	resp=$(wget -q -O - "$RPC_URL" --post-data="$post_data")
	if [ -z "$resp" ]
	then
		>&2 echo "an unknown error occurred"
		exit $EXITCODE_UNKNOWN_ERROR
	fi
	result_obj=$(echo "$resp" | jq ".result")
	if [ "$result_obj" == "null" ]
	then
		>&2 echo "an unknown error occured"
		exit $EXITCODE_UNKNOWN_ERROR
	fi

	# Output status
	output=$(output-result "$result_obj")
	echo "$output"
fi

